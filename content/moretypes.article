Mehr Typen: Structs, Slices und Maps
Lerne, wie Typen mithilfe bereits bestehender Typen definiert werden können: Diese Lektion behandelt Structgs, Arrays, Slices und Maps.

Die Go-Autoren
http://golang.org

* Pointer

In Go gibt es Pointer.
Ein Pointer hält die Adresse einer Variable im Speicher.

Der Typ `*T` ist ein Pointer auf einen Wert des Typs `T`. Der Nullwert von `*T` ist `nil`.

	var p *int

Der `&` -Operator erzeugt einen Pointer auf seinen Operanden.

	i := 42
	p = &i

Der `*` -Operator liefert den Wert auf den der Pointer verweist.

	fmt.Println(*p) // lese i mit dem Pointer p
	*p = 21         // setze i mit dem Pointer p

Das wird als "Dereferenzieren" oder "Indirektion" bezeichnet.

Im Gegensatz zu C gibt es in Go keine Pointerarithmetik.

.play moretypes/pointers.go

* Structs

Ein `struct` ist ein Verbund von Elementen.

(Und eine `type` -Deklaration ist, was man erwartet: Eine Typdeklaration.)

.play moretypes/structs.go

* Struct-Elemente

Der Zugriff auf die Elemente eines Structs erfolgt mit einem Punkt.

.play moretypes/struct-fields.go

* Pointers auf Structs

Auf Struct-Elemente kann auch durch einen Struct-Pointer zugegriffen werden.

Die Indirektion über den Pointer ist transparent.

.play moretypes/struct-pointers.go

* Struct-Literale

Ein Struct-Literal beschreibt einen neu allokierten Struct-Wert, indem eine Liste der Werte aller Elemente des Structs angegeben wird.

Man kann auch nur eine Untermenge der Elemente angeben. Das ist mit der `Name:` -Syntax möglich, die Reihenfolge der Elemente ist dabei irrelevant.

Der Präfix `&` gibt einen Pointer auf den Struct-Wert zurück.

.play moretypes/struct-literals.go

* Arrays

Der Typ `[n]T` ist ein Array von `n` Werten des Typs `T`.

Die Anweisung

	var a [10]int

deklariert eine Variable `a` als ein Array von zehn Integers.

Die Länge eines Arrays ist Teil seines Typs, die Größe eines Arrays kann also nicht verändert werden.
Das sieht aus wie eine Einschränkung, aber keine Sorge:
In Go gibt es einen einfachen Weg, mit Arrays zu arbeiten.

.play moretypes/array.go

* Slices

Ein Array hat eine fixe Größe.
Ein Slice dagegen hat eine dynamische Größe und bietet flexiblen Zugriff
auf die Elemente eines Arrays. In der Praxis kommen Slices wesentlich
häufiger zum Einsatz als Arrays.

Der Typ `[]T` ist ein Slice mit Elementen des Typs `T`.

Der folgende Ausdruck erzeugt ein Slice mit den ersten fünf Werten des Arrays `a`:

	a[0:5]


.play moretypes/slices.go


* Slices sind wie Referenzen auf Arrays

Ein Slice speichert keine Daten, es beschreibt 
nur einen Abschnitt eines dahinterliegenden Arrays.

Ändert man die Elemente eines Slices, ändert man 
damit die jeweiligen Elemente des dahinterliegenden Arrays.

Andere Slices, die auf dem selben Array operieren, werden diese Änderungen ebenfalls sehen.

.play moretypes/slices-pointers.go


* Slice-Literale

Ein Slice-Literal ist wie ein Array-Literal ohne Angabe der Länge.

Das ist ein Array-Literal:

	[3]bool{true, true, false}

Und die folgende Zeile erzeugt das gleiche Array wie die Zeile oben
und erzeugt dann ein Slice, das das Array referenziert:

	[]bool{true, true, false}

.play moretypes/slice-literals.go


* Slice Standardwerte

Beim Erzeugen von Slices können die obere und untere Grenze weggelassen werden.
Stattdessen werden dann Standardwerte verwendet.

Der Standardwert für die untere Grenze ist 0, jener für die obere Grenze die Länge des Slices.

Für das Array

	var a [10]int

sind folgende Ausdrücke gleichwertig:

	a[0:10]
	a[:10]
	a[0:]
	a[:]

.play moretypes/slice-bounds.go


* Länge und Kapazität von Slices.

Ein Slice hat sowohl eine _Länge_ als auch eine _Kapazität_.

Die Länge eines Slices ist die Anzahl der darin enthaltenen Elemente.

Die Kapazität eines Slices ist die Anzahl der Elemente im dahinterliegenden
Array ab dem ersten Element im Slice.

Länge und Kapazität eines Slices können mit den Ausdrücken `len(s)` und `cap(s)`
abgefragt werden.

Man kann die Länge eines Slices durch re-slicing ändern, wenn die Kapazität des 
Slices dies zulässt.
Versuche, eine der Slice-Operationen im Beispielprogramm zu ändern, sodass die 
Kapazität des Slices überschritten wird und schau, was passiert.

.play moretypes/slice-len-cap.go


* Nil-Slices

Der Nullwert eines Slices ist `nil`.

Ein nil-Slice hat eine Länge und eine Kapazität von 0 und hat kein dahinterliegendes
Array.

.play moretypes/nil-slices.go


* Slices mit make erzeugen

Slices können mit der eingebauten `make`-Funktion erzeugt werden;
so werden Arrays dynamischer Größe erzeugt.

Die `make`-Funktion allokiert ein Array voller Nullen und gibt ein Slice
zurück die dieses Array referenziert:

	a := make([]int, 5)  // len(a)=5

Um die Kapazität des Slices zu definieren, muss ein drittes Argument an `make` übergeben werden:

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play moretypes/making-slices.go


* Slices von Slices

Slices können beliebige Typen beinhalten, also auch andere Slices.

.play moretypes/slices-of-slice.go

* Elemente zu einem Slice hinzufügen

Es ist möglich, neue Elemente zu einem Slice hinzuzufügen. Go bietet dafür
im Basispaket die Funktion `append` an. Die 
[[http://golang.org/pkg/builtin/#append][Dokumentation]] des Basispakets 
beschreibt `append` genauer.

	func append(s []T, vs ...T) []T

Der erste Parameter `s` von `append` ist ein Slice vom Typ `T`, der Rest sind Werte
vom Typ `T`, die an das Slice angehängt werden sollen.

Das Ergebnis von `append` ist ein Slice, das alle Werte des ursprünglichen 
Slices sowie alle neu hinzugefügten Werte enthält.

Ist das Array, auf das `s` verweist, zu klein für alle angegebenen Werte,
wird ein größeres Array allokiert. Das zurückgegebene Slice
verweist dann auf das neu allokierte Array.

(Um mehr über Slices zu erfahren, lies folgenden Artikel: 
[[http://golang.org/doc/articles/slices_usage_and_internals.html][Slices: Usage and internals]].)

.play moretypes/append.go

* Range

Die `range` -Form der `for` -Schleife iteriert über ein Slice oder eine Map.

.play moretypes/range.go

* Mehr zu Range

Wird der Index oder der Wert nicht benötigt, kann bei `range` an der jeweiligen Stelle `_` angegeben werden.

Wird nur der Index benötigt, kann ", Wert" gänzlich weggelassen werden.

.play moretypes/range-continued.go

* Übung: Slices

Implementiere `Pic`. `Pic` sollte ein Slice der Länge `dy` zurückgeben. 
Jedes Element dieses Slices sollte wiederum ein Slice von `dx` 
vorzeichenlosen 8-bit-Integers sein.
Wird das Programm ausgeführt, dann zeigt es dein Bild an und interpretiert jeden Integer als Grauwert (bzw. eigentlich Blauwert).

Welches Bild du erzeugst, ist dir überlassen. Interessante Funktionen könnten `(x+y)/2`, `x*y`, und `x^y` sein (für die letzte Funktion kann [[http://golang.org/pkg/math/#Pow][`math.Pow`]] verwendet werden).

(Hinweis: Du wirst eine Schleife benötigen, um die `[]uint8` innerhalb der `[][]uint8` zu allokieren).

(Hinweis: Verwende `uint8(intValue)` für die Typumwandlung auf vorzeichenlose 8-bit-Integer.)

.play moretypes/exercise-slices.go

* Maps

Eine Map ordnet Schlüsseln Werte zu.

Maps müssen mit `make` (nicht `new`) erzeugt werden. Die `nil` -Map ist leer, ihr können keine Schlüssel/Wertpaare zugewiesen werden.

.play moretypes/maps.go

* Map Literale

Map-Literale sehe aus wie Struct-Literale, allerdings müssen bei Maps auch Schlüssel angegeben werden.

.play moretypes/map-literals.go

* Mehr zu Map-Literalen

Ist der Typ der Elemente des Literals nur durch den Typnamen definiert, kann der Typname weggelassen werden.

.play moretypes/map-literals-continued.go

* Maps verändern

Einfügen oder Ändern eines Werts in einer Map `m`:

	m[key] = elem

Einen Wert aus einer Map auslesen:

	elem = m[key]

Ein Element löschen:

	delete(m, key)

Mit einer zweiwertigen Zuweisung überprüfen, ob ein Schlüssel in einer Map vorhanden ist:

	elem, ok = m[key]

Ist `key` in `m`, dann ist `ok` `true`. Wenn nicht, ist `ok` `false` und `elem` hat den Nullwert des Werttyps der Map.

Folglich wird auch der Nullwert des Werttyps der Map zurückgegeben, wenn versucht wird, einen Wert für einen Schlüssel, der nicht in der Map ist, auszulesen.

.play moretypes/mutating-maps.go

* Übung: Maps

Implementiere `WordCount`. Es sollte eine Map mit der Anzahl jedes "Worts" im String `s` zurückgeben. Die Funktion `wc.Test` durchläuft einige Tests mit der von dir implementierten und angegebenen Funktion und gibt
im Erfolgsfall success, sonst failure aus.

[[http://golang.org/pkg/strings/#Fields][strings.Fields]] könnte bei der Implementierung hilfreich sein.

.play moretypes/exercise-maps.go

* Funktionen als Werte

Funktionen sind auch Werte.

.play moretypes/function-values.go

* Funktionen als Closures

Go-Funktionen können auch Closures sein. Eine Closure ist eine Funktion, die auf Variablen ihres Erstellungskontexts zugreifen kann. Die Funktion kann die Werte von Variablen auslesen oder den Variablen neue
Werte zuweisen. Somit ist die Funktion an die Variablen "gebunden".

Die `adder` -Funktion gibt zum Beispiel eine Closure zurück. Jede Closure ist an ihre eigene `sum` -Variable gebunden.

.play moretypes/function-closures.go

* Übung: Fibonacci-Closure

Lass uns ein bisschen mit Funktionen herumspielen.

Implementiere eine `fibonacci` -Funktion, die eine Funktion (eine Closure) zurückgibt, die wiederum aufeinanderfolgende Fibonaccizahlen zurückgibt.

.play moretypes/exercise-fibonacci-closure.go

* Gratuliere!

Du hast diese Lektion beendet!

Du kannst nun zurück zur Liste der [[/list][Module]] gehen um zu sehen, welche Lektionen als nächstes anstehen. Alternativ kannst du gleich mit der [[javascript:click('.next-page')][nächsten Lektion]] weitermachen.
